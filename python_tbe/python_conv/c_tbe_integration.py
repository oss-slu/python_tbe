import ctypes
import os
import sys
import json


class CTbeIntegration:
    """
    Python integration for the C-based TBE batch processor.
    """

    def __init__(self, lib_path: str):
        """
        Initialize the integration by loading the C library.

        :param lib_path: Path to the compiled C shared library (e.g., .so file).
        """
        if not os.path.exists(lib_path):
            raise FileNotFoundError(f"The library file '{lib_path}' does not exist.")
        self.lib = ctypes.CDLL(lib_path)

        # Define the argument and return types for the C functions
        self.lib.process_tbe_directory.argtypes = [ctypes.c_char_p]
        self.lib.process_tbe_directory.restype = ctypes.c_int

        # Define the metadata summary generation function
        self.lib.generate_metadata_summary.argtypes = []
        self.lib.generate_metadata_summary.restype = None

    def process_directory(self, directory: str) -> int:
        """
        Call the C function to process a directory of TBE files.

        :param directory: Path to the directory containing TBE files.
        :return: Exit code from the C function (0 for success, non-zero for errors).
        """
        if not os.path.isdir(directory):
            raise NotADirectoryError(f"The path '{directory}' is not a valid directory.")
        result = self.lib.process_tbe_directory(directory.encode('utf-8'))
        return result

    def generate_summary(self):
        """
        Call the C function to generate a metadata summary.
        """
        self.lib.generate_metadata_summary()

    @staticmethod
    def load_json_summary(json_path: str) -> dict:
        """
        Load the generated metadata summary JSON file.

        :param json_path: Path to the JSON file generated by the C library.
        :return: Parsed JSON data as a dictionary.
        """
        if not os.path.exists(json_path):
            raise FileNotFoundError(f"The JSON file '{json_path}' does not exist.")

        with open(json_path, 'r') as file:
            data = json.load(file)
        return data

    @staticmethod
    def display_visual_summary(summary: dict):
        """
        Display the metadata summary in a human-readable visual format.

        :param summary: Parsed JSON summary data.
        """
        print("\n===== Metadata Summary =====")
        print(f"Total files processed: {summary.get('processed_files', 0)}")
        print(f"Total files skipped: {summary.get('skipped_files', 0)}")
        print(f"Total files: {summary.get('total_files', 0)}")
        print(f"Total records: {summary.get('total_records', 0)}")
        print(f"Average records per file: {summary.get('average_records_per_file', 0.0):.2f}")
        print("\nProcessed Files:")
        for file_data in summary.get('files', []):
            print(f"- {file_data['filename']}: {file_data['records']} records")
        print("============================")


if __name__ == "__main__":
    # Parse command-line arguments
    if len(sys.argv) < 3:
        print("Usage: python c_tbe_integration.py <path_to_so_file> <directory_to_process>")
        sys.exit(1)

    lib_path = sys.argv[1]  # Path to the compiled .so file
    tbe_directory = sys.argv[2]  # Path to the directory containing TBE files
    json_path = "metadata_summary.json"  # Path to the metadata summary JSON file

    try:
        integration = CTbeIntegration(lib_path)
        print(f"Processing TBE files in directory: {tbe_directory}")
        exit_code = integration.process_directory(tbe_directory)

        if exit_code == 0:
            print(f"Successfully processed TBE files in directory: {tbe_directory}")
        else:
            print(f"Processing TBE files failed with exit code: {exit_code}")

        print("Generating metadata summary...")
        integration.generate_summary()
        print("Metadata summary generation complete.")

        # Load and display the metadata summary
        summary_data = integration.load_json_summary(json_path)
        integration.display_visual_summary(summary_data)

    except Exception as e:
        print(f"Error: {e}")
